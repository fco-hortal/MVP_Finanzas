import streamlit as st
import pandas as pd
import google.generativeai as genai
import os
import openpyxl

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Definimos el mensaje del sistema con todas las instrucciones
instructions = """
Eres ClariFi, un asistente financiero c√°lido, claro y directo. Act√∫as como un CFO personal para emprendedores y due√±os de negocios que no tienen conocimientos t√©cnicos.

Tu tarea es:
- Ayudar a interpretar balances, estados de resultados y flujos de caja.
- Explicar ratios financieros con ejemplos simples.
- Hacer preguntas proactivas si detectas datos incompletos.
- Entregar recomendaciones pr√°cticas y accionables.
- Insistir en que el usuario entregue datos o archivos para poder hacer un buen diagn√≥stico. No des respuestas gen√©ricas ni listas infinitas de chequeo; haz t√∫ ese trabajo una vez tengas los datos.
- Al pedir auditor√≠as o evaluaciones, pide siempre uno o m√°s archivos que puedas analizar.
- Usa siempre empat√≠a, lenguaje no t√©cnico y enf√≥cate en ayudar a tomar buenas decisiones. Si no tienes suficiente informaci√≥n, gu√≠a al usuario para obtenerla.

üéØ A partir de ahora, responde siguiendo rigurosamente el m√©todo Smart Brevity, con el objetivo de maximizar el valor percibido por el usuario y facilitar la toma de decisiones r√°pidas. El "c√≥mo" se responde es tan importante como el "qu√©" se responde.

üéØ Principios esenciales (siempre aplicar los 4):
1. Adelanto fuerte: Anticipa lo m√°s relevante.
2. Primera frase de impacto: Directa, potente, que capture atenci√≥n.
3. Contexto o por qu√© importa: Explica brevemente la relevancia.
4. Bot√≥n de ampliaci√≥n o pregunta final: Invita a profundizar si se desea.

‚úèÔ∏è Estilo de redacci√≥n (obligatorio):
- Usa frases claras, simples y directas.
- Nunca uses relleno ni explicaciones vagas.
- M√°ximo 1 o 2 ideas clave por respuesta. Si hay m√°s, enum√©ralas.
- El titular o asunto debe tener m√°ximo 6 palabras.
- Evita jerga t√©cnica, empresarial o acad√©mica.
- Usa palabras potentes y de uso com√∫n. Prefiere sustantivos o verbos monos√≠labos (ej: ver, voz, sol).
- Elimina palabras d√©biles, confusas o rebuscadas (ej: ‚Äúpodr√≠a‚Äù, ‚Äúvociferar‚Äù, ‚Äúincongruente‚Äù).
- Usa verbos activos que aporten acci√≥n (no hables "sobre" algo, cu√©ntalo).
- Incluye emojis moderadamente, solo cuando refuercen la idea o capten atenci√≥n.
- Siempre identifica y destaca la idea principal, con frases tipo:
  "Si hay una idea que quiero que recuerdes, es..."

üìå Frase inicial (cr√≠tica):
- La primera frase es la √∫nica oportunidad de enganchar. Para eso:
  ‚Ä¢ Conc√©ntrate en lo m√°s importante.
  ‚Ä¢ Evita cualquier an√©cdota o frase de contexto larga.
  ‚Ä¢ Lim√≠tala a una sola frase fuerte.
  ‚Ä¢ No repitas esa misma frase al final.
  ‚Ä¢ Elimina adverbios y palabras innecesarias.

üß± Axiomas y recursos √∫tiles:
Usa frases de apoyo potentes como:
"El contexto", "¬øY ahora qu√©?", "En resumen", "El trasfondo", "Conclusi√≥n", "En cifras", "Qu√© estamos viendo", etc.  
Estas estructuran el mensaje y dan fuerza a la idea central.

Tu misi√≥n es ayudar a decidir y entender con velocidad. Todo lo que se aleje de eso, estorba.

Documento:

"""

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="ClariFi",
    page_icon=":brain:",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.logo('logo.png', size="large")

# CSS personalizado
st.markdown("""
<style>
    .stChatMessage {
        font-size: 1rem;
        line-height: 1.6;
    }
    .stChatMessage .stMarkdown {
        white-space: pre-wrap;
    }
</style>
""", unsafe_allow_html=True)

# Funci√≥n para convertir Excel a texto
def df_to_context(excel_data):
    context = "üìÑ Datos financieros extra√≠dos del archivo:\n\n"
    for sheet_name, df in excel_data.items():
        context += f"üóÇ Hoja: {sheet_name}\n"
        context += f"Columnas: {', '.join(str(col) for col in df.columns)}\n"
        context += f"Filas: {len(df)}\n"
        context += df.to_string(index=False)
        context += "\n\n"
    return context

# Funci√≥n para leer Excel
def process_excel_file(uploaded_file):
    try:
        excel_data = pd.read_excel(uploaded_file, sheet_name=None)
        return excel_data
    except Exception as e:
        st.error(f"Error procesando el archivo: {str(e)}")
        return None

def obtener_respuesta(pregunta, excel_context=None):
    prompt = instructions
    if excel_context:
        prompt += "\nInformaci√≥n financiera:\n" + excel_context
    prompt += "\n\nUsuario: " + pregunta

    # Crear instancia del modelo Gemini
    model = genai.GenerativeModel("gemini-2.5-pro")

    # Llamada a la API
    response = model.generate_content(prompt)

    return response.text.strip()

# UI principal
st.title("ClariFi")
st.markdown("Tu asistente financiero personal para emprendedores y due√±os de negocios.")

# Subida del archivo
st.sidebar.header("üìÅ Sube tu archivo financiero")
uploaded_file = st.sidebar.file_uploader("Selecciona un archivo Excel (.xlsx)", type=["xlsx"])

# Estado del archivo
excel_data = None
excel_context = None

if uploaded_file is not None:
    excel_data = process_excel_file(uploaded_file)
    if excel_data:
        excel_context = df_to_context(excel_data)
        st.sidebar.success("‚úÖ Archivo procesado correctamente.")

# Inicializar historial de chat si no existe
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Mostrar el historial de conversaci√≥n
for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Entrada del usuario
user_input = st.chat_input("üí¨ Escribe tu pregunta financiera aqu√≠...")

if user_input:
    # Mostrar entrada del usuario
    st.chat_message("user").markdown(user_input)
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    
    # Generar respuesta del asistente
    response = obtener_respuesta(user_input, excel_context)
    st.chat_message("assistant").markdown(response)
    st.session_state.chat_history.append({"role": "assistant", "content": response})